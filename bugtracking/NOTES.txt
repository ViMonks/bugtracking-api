To run pytest tests: docker-compose -f local.yml run --rm django pytest
These are not covered in the Django test run configuration.

To run shell or shell_plus, in terminal:
docker-compose -f local.yml run django python manage.py shell

Got social authentication working, using this package: https://github.com/RealmTeam/django-rest-framework-social-oauth2
It's a library that integrates Python Social Auth and Django OAuth Toolkit into DRF.
The github page has good instructions, but primary usage involves two endpoints:
For Django users, there's an endpoint to exchange a username and a password for an access token. This token is then used to authorize requests.
For social users, there's an endpoint to exchange the OAuth TOKEN for a Django token. This endpoint also creates a new user if necessary.
In both cases, the tokens expire after ten hours. There's a refresh token endpoint, where you provide a refresh token and receive a new Django authorization token in response.
I'll have to figure out how to handle all of this on the front end. Particularly:
1. Storing tokens
2. Knowing when tokens need to be refreshed and handling that
3. Properly redirecting logged out users/users whose tokens have expired.
But I've got the basics working.

UPDATE: 12/11/20
User management is more or less done, but it's kind of a hacky implementation. I'm using DRF-Social-OAuth2 for logging in (regular or social users) and creating new users based on social accounts.
The token endpoint provides an OAuth2 token, which is used for authorization for any of the views.
Then I'm using Django-Rest-Auth, which is an Allauth implementation, to provide endpoints for user creation, password management, etc., complete with email confirmation.
Problem is, this package also provides login endpoints, which return regular DRF Tokens, but I'm not using those for auth. Using OAuth2 tokens instead.
So I've redirected the login endpoint, which is hacky, but it works. I also had to modify the Allauth email sending functionality to use the frontend urls.
See settings.CUSTOM_ACCOUNT_CONFIRMATION_EMAIL_URL and settings.FRONTEND_HOST for details on that implementation. But again, it's hacky.

DRF-Social-OAuth2: https://github.com/RealmTeam/django-rest-framework-social-oauth2
Django-Rest-Auth: https://django-rest-auth.readthedocs.io/en/latest/api_endpoints.html
Guide on custom implementation of auth endpoints: useful reference: https://gist.github.com/dgilge/dbe9260208aadee535cef7c412a1162e#file-02_adapter-py

DRF-Firebase-Auth https://github.com/garyburgmann/drf-firebase-auth
Now using this as my main authentication backend. I had to create my own custom subclass of it (bugtracking.users.auth.CustomFirebaseAuthentication) to fix a deprecated error call.
Basic usage is simple: get the Firebase auth user: auth.currentUser.accessToken or currentUser.getIdToken() and pass that as the authorization header, prefixed by JWT, e.g.,
"Authorization: JWT <token>"
It will get or create a Django user object.
Used the quickstart to fire up a frontend to test it with: https://github.com/firebase/quickstart-js/blob/master/auth/README.md
Have to link the package to credentials in settings. Credentials are stored as JSON file and should be kept secret.
Link to generating credentials can be found in the quickstart readme above, or here: https://console.firebase.google.com/u/0/project/bugtracking-api-auth/settings/serviceaccounts/adminsdk
